{"version":3,"sources":["menuBtn.js","menuModes.js","menuTools.js","menuItems.js","index.js"],"names":["MenuBtn","props","className","id","data","mode","tool","item","colorName","isActive","type","image","onClick","defaultValue","customColor","onChange","changeColor","alt","src","colorStyle","background","color","style","MenuModes","listItems","toolData","map","i","key","currentMode","MenuTools","currentModeData","tools","currentTool","MenuItems","menuItems","compareTarget","colors","find","items","currentItem","App","canvas","React","createRef","fileInput","upLoadImg","bind","useDefaultMap","changeMode","changeTool","changeItem","state","isImgUploaded","canvasSizeX","setting","squareSize","squarePerBlock","mapXBlock","mapPadding","canvasSizeY","mapYBlock","length","prevProps","paper","project","this","handleDraw","handleBuildAndPlant","e","fileName","label","target","nextElementSibling","labelVal","innerHTML","value","split","pop","uploadImg","current","files","reader","FileReader","that","addEventListener","setState","renderMap","result","readAsDataURL","fetch","then","response","blob","url","width","height","setup","raster","Raster","mapLayer","Layer","name","activate","Shape","Rectangle","x","y","fillColor","colorBg","onLoad","mapRasterWidth","sampleEndX","sampleStartX","mapRasterHeight","sampleEndY","sampleStartY","mapRaster","getSubRaster","remove","visible","size","Size","getPixel","renderGrid","componentDidUpdate","gridLine","gridLayer","dashStroke","Path","Line","Point","strokeWidth","dashArray","strokeColor","colorMainGrid","colorGrid","locked","meridianMark","PointText","colorGridMark","fontSize","content","String","fromCharCode","fontWeight","j","parallelMark","closest","getAttribute","clearBrushHover","clearNotBuiltItem","point","layers","buildLayer","children","forEach","itemSet","deletBtn","opacity","drawLayer","drawTool","Tool","thisTool","thisColors","refPointDist","activeLayer","brush","hideDist","brushSquare","onMouseMove","position","onMouseDown","isEditableArea","draw","onMouseDrag","testPoint","drawRect","hitResult","hitTest","fill","Math","floor","random","buildTool","buildPath","baseBlock","buildItem","isBuild","isEdit","thisItem","rotate","parseInt","replace","strokeColorBilding","Group","Circle","strokeColorPlant","addChild","buildImage","imageSizeSquare","deletBtnBg","center","bounds","_width","radius","deletBtnIcon","getSnapPoint","built","tolerance","parent","onMouseUp","document","querySelectorAll","btn","blur","isX","_height","lastBuild","ref","accept","selectImg","for","Component","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.b63d9a8f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction MenuBtn(props) {\n  const id = props.data.mode || props.data.tool || props.data.item || props.data.colorName;\n  let className;\n  const isActive = props.isActive ? 'active' : '';\n  if (props.data.colorName) {\n    className = `color ${props.data.colorName} ${isActive}`;\n  }\n  else if (props.data.item) {\n    className = `item ${props.type} ${props.data.item} ${isActive}`;\n  }\n  else {\n    className = `${props.type} ${isActive}`;\n  }\n  if (props.data.image) {\n    if (id === 'colorCustom') {\n      return (\n        <button id={id} onClick={props.onClick} className={className}>\n          <label>\n            <input type='color' defaultValue={props.customColor} onChange={props.changeColor} />\n            <img alt={id} src={props.data.image} />\n          </label>\n        </button>\n      )\n    }\n    else {\n      if (props.type === 'tree') {\n        const colorStyle = {background: props.data.color};\n        return (\n          <button id={id} onClick={props.onClick} className={className} style={colorStyle}>\n            <img alt={id} src={props.data.image} />\n          </button>\n        )\n      }\n      else {\n        return (\n          <button id={id} onClick={props.onClick} className={className}>\n            <img alt={id} src={props.data.image} />\n          </button>\n        )\n      }\n    }\n  }\n  else {\n    let color;\n    if (props.type === 'flower') {\n      color = props.data.item;\n    }\n    else {\n      color = props.data.color;\n    }\n    const colorStyle = {background: color};\n    return (\n      <button id={id} onClick={props.onClick} className={className}>\n        <div className=\"colorBlock\" style={colorStyle}></div>\n      </button>\n    )\n  }\n}\n\nexport default MenuBtn;","import React from 'react';\nimport MenuBtn from './menuBtn.js';\n\nfunction MenuModes(props) {\n  const toolData = props.toolData;\n  const listItems = toolData.map((mode, i) =>\n    <li key={i}>\n      <MenuBtn data={mode} type='mode' isActive={props.currentMode === mode.mode} onClick={props.onClick} />\n    </li>\n  );\n  return (\n    <ul>{listItems}</ul>\n  );\n}\n\nexport default MenuModes;","import React from 'react';\nimport MenuBtn from './menuBtn.js';\n\nfunction MenuTools(props) {\n  const listItems = props.currentModeData.tools.map((tool, i) =>\n    <li key={i}>\n      <MenuBtn data={tool} type='tool' isActive={props.currentTool === tool.tool} onClick={props.onClick} />\n    </li>\n  );\n  return (\n    <ul>\n      {listItems}\n    </ul>\n  );\n}\n\nexport default MenuTools;","import React from 'react';\nimport MenuBtn from './menuBtn.js';\n\nfunction MenuItems(props) {\n  let menuItems, compareTarget;\n  const type = props.currentTool;\n  if (props.currentMode === 'draw') {\n    menuItems = props.currentModeData.colors;\n    compareTarget = 'colorName';\n  }\n  else {\n    const currentTool = props.currentModeData.tools.find((data) => {\n        if (data.tool === props.currentTool) {\n          return data;\n        }\n      },\n    );\n    menuItems = currentTool.items;\n    compareTarget = 'item';\n  }\n  const listItems = menuItems.map((tool, i) =>\n    <li key={i}>\n      <MenuBtn data={tool} type={type} isActive={tool[compareTarget] === props.currentItem} onClick={props.onClick} customColor={props.customColor} changeColor={props.changeColor} />\n    </li>\n  );\n  return (\n    <div className=\"menuItems\">\n      <hr />\n      <ul>\n        {listItems}\n      </ul>\n    </div>\n  )\n}\n\nexport default MenuItems;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport paper from 'paper';\nimport setting from './setting.json';\nimport toolData from './toolData.json';\nimport MenuModes from './menuModes.js';\nimport MenuTools from './menuTools.js';\nimport MenuItems from './menuItems.js';\nimport './index.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.canvas = React.createRef();\n    this.fileInput = React.createRef();\n    this.upLoadImg = this.upLoadImg.bind(this);\n    this.useDefaultMap = this.useDefaultMap.bind(this);\n    this.changeMode = this.changeMode.bind(this);\n    this.changeTool = this.changeTool.bind(this);\n    this.changeItem = this.changeItem.bind(this);\n    this.changeColor = this.changeColor.bind(this);\n    this.state = {\n      isImgUploaded: false,\n      canvasSizeX: setting.squareSize * setting.squarePerBlock * setting.mapXBlock + setting.mapPadding * 2,\n      canvasSizeY: setting.squareSize * setting.squarePerBlock * setting.mapYBlock + setting.mapPadding * 2,\n      squareSize: setting.squareSize,\n      currentMode: toolData.toolData[0].mode,\n      currentModeData: toolData.toolData[0],\n      currentTool: toolData.toolData[0].tools[0].tool,\n      currentItem: toolData.toolData[0].colors[0].colorName,\n      customColor: toolData.toolData[0].colors[toolData.toolData[0].colors.length - 1].color[0]\n    };\n  }\n  componentDidUpdate(prevProps) {\n    if (paper.project) {\n      if (this.state.currentMode === 'draw') {\n        this.handleDraw();\n      }\n      else if ((this.state.currentMode === 'build' || this.state.currentMode === 'plant') && this.state.currentItem) {\n        this.handleBuildAndPlant();\n      }\n    }\n  }\n  selectImg(e) {\n    const label = e.target.nextElementSibling;\n    const labelVal = label.innerHTML;\n\t\tlet fileName = '';\n\t\tfileName = e.target.value.split('\\\\').pop();\n\t\tif (fileName) {\n      label.innerHTML = fileName;\n    }\n\t\telse {\n      label.innerHTML = labelVal;\n    }\n  }\n  upLoadImg() {\n    const uploadImg = this.fileInput.current.files[0];\n    const reader = new FileReader();\n    const that = this;\n    reader.addEventListener(\"load\", function () {\n      that.setState({\n        isImgUploaded: true\n      });\n      that.renderMap(reader.result);\n    }, false);\n    if (uploadImg) {\n      reader.readAsDataURL(uploadImg);\n    }\n  }\n  useDefaultMap() {\n    const that = this;\n    fetch('test.jpg')\n    .then(function(response) {\n      return response.blob()\n    })\n    .then(function(blob) {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.addEventListener(\"load\", function () {\n        that.setState({\n          isImgUploaded: true\n        });\n        that.renderMap(reader.result);\n      }, false);\n    });\n  }\n  renderMap(url) {\n    const canvas = this.canvas.current;\n    canvas.width = this.state.canvasSizeX;\n    canvas.height = this.state.canvasSizeY;\n    paper.setup(canvas);\n    let raster = new paper.Raster(url);\n    const mapLayer = new paper.Layer();\n    mapLayer.name = 'mapLayer';\n    const drawLayer = new paper.Layer();\n    drawLayer.name = 'drawLayer';\n    const buildLayer = new paper.Layer();\n    buildLayer.name = 'buildLayer';\n    mapLayer.activate();\n    const bgRect = new paper.Shape.Rectangle({\n      x: 0,\n      y: 0,\n      width: this.state.canvasSizeX,\n      height: this.state.canvasSizeY,\n    });\n    bgRect.fillColor = setting.colorBg;\n    raster.onLoad = () => {\n      mapLayer.activate();\n      const mapRasterWidth = setting.sampleEndX - setting.sampleStartX;\n      const mapRasterHeight = setting.sampleEndY - setting.sampleStartY;\n      const mapRaster = raster.getSubRaster(new paper.Rectangle(setting.sampleStartX, setting.sampleStartY, mapRasterWidth, mapRasterHeight));\n      raster.remove();\n      mapRaster.visible = false;\n      mapRaster.size = new paper.Size(setting.squarePerBlock * setting.mapXBlock, setting.squarePerBlock * setting.mapYBlock);\n      for (let y = 0; y < mapRaster.height; y++) {\n        for(let x = 0; x < mapRaster.width; x++) {\n          const color = mapRaster.getPixel(x, y);\n          const pixelRect = new paper.Shape.Rectangle({\n            x: x * this.state.squareSize + setting.mapPadding, \n            y: y * this.state.squareSize + setting.mapPadding,\n            width: this.state.squareSize,\n            height: this.state.squareSize\n          });\n          pixelRect.fillColor = color;\n        }\n      }\n    }\n    this.renderGrid();\n    this.componentDidUpdate();\n  }\n  renderGrid() {\n    const gridLayer = new paper.Layer();\n    gridLayer.name = 'gridLayer';\n    gridLayer.activate();\n    let gridLine;\n    const dashStroke = [this.state.squareSize + 5, this.state.squareSize - 2]\n    for(let x = 0; x <= setting.squarePerBlock * setting.mapXBlock; x++) {\n      if (x % setting.squarePerBlock === 0) {\n        gridLine = new paper.Path.Line(new paper.Point(x * this.state.squareSize + setting.mapPadding - 0.5, 0), new paper.Point(x * this.state.squareSize + setting.mapPadding - 0.5, this.state.canvasSizeY));\n        gridLine.strokeWidth = 3;\n        gridLine.dashArray = dashStroke;\n        gridLine.strokeColor = setting.colorMainGrid;\n      }\n      else {\n        gridLine = new paper.Path.Line(new paper.Point(x * this.state.squareSize + setting.mapPadding - 0.5, setting.mapPadding), new paper.Point(x * this.state.squareSize + setting.mapPadding - 0.5, this.state.canvasSizeY - setting.mapPadding));\n        gridLine.strokeColor = setting.colorGrid;\n      }\n      gridLine.locked = true;\n    }\n    for(let y = 0; y <= setting.squarePerBlock * setting.mapYBlock; y++) {\n      if (y % setting.squarePerBlock === 0) {\n        gridLine = new paper.Path.Line(new paper.Point(0, y * this.state.squareSize + setting.mapPadding - 0.5), new paper.Point(this.state.canvasSizeX, y * this.state.squareSize + setting.mapPadding - 0.5));\n        gridLine.strokeWidth = 3;\n        gridLine.dashArray = dashStroke;\n        gridLine.strokeColor = setting.colorMainGrid;\n      }\n      else {\n        gridLine = new paper.Path.Line(new paper.Point(setting.mapPadding, y * this.state.squareSize + setting.mapPadding - 0.5), new paper.Point(this.state.canvasSizeX - setting.mapPadding, y * this.state.squareSize + setting.mapPadding - 0.5));\n        gridLine.strokeColor = setting.colorGrid;\n      }\n      gridLine.locked = true;\n    }\n    for (let i = 0; i < setting.mapYBlock; i++) {\n      const meridianMark = new paper.PointText(new paper.Point(setting.mapPadding / 5, this.state.squareSize * setting.squarePerBlock * (i + 0.5) + setting.mapPadding ));\n      meridianMark.fillColor = setting.colorGridMark;\n      meridianMark.fontSize = this.state.squareSize * 2;\n      meridianMark.content = String.fromCharCode(65 + i);\n      meridianMark.fontWeight = 'bold';\n    }\n    for (let j = 0; j < setting.mapXBlock; j++) {\n      let parallelMark = new paper.PointText(new paper.Point(this.state.squareSize * setting.squarePerBlock * (j + 0.5) + setting.mapPadding, this.state.squareSize * setting.squarePerBlock * setting.mapYBlock + setting.mapPadding * 1.8));\n      parallelMark.fillColor = setting.colorGridMark;\n      parallelMark.fontSize = this.state.squareSize * 2;\n      parallelMark.content = j + 1;\n      parallelMark.fontWeight = 'bold';\n    }\n  }\n  changeMode(e) {\n    const target = e.target.closest('button');\n    const currentMode = target.getAttribute('id');\n    const currentModeData = toolData.toolData.find((data) => {\n      if (data.mode === currentMode) {\n        return data;\n      }\n    });\n    let currentItem;\n    if (currentMode === 'draw') {\n      currentItem = currentModeData.colors[0].colorName;\n    }\n    else {\n      currentItem = currentModeData.tools[0].items[0].item;\n    }\n    this.setState({\n      currentMode: currentMode,\n      currentModeData: currentModeData,\n      currentTool: currentModeData.tools[0].tool,\n      currentItem: currentItem\n    });\n    this.clearBrushHover();\n    this.clearNotBuiltItem();\n  }\n  changeTool(e) {\n    const target = e.target.closest('button');\n    const currentTool = target.getAttribute('id');\n    let currentItem = this.state.currentItem;\n    if (this.state.currentMode !== 'draw') {\n      const toolData = this.state.currentModeData.tools.find((data) => {\n        if (data.tool === currentTool) {\n          return data;\n        }\n      });\n      currentItem = toolData.items[0].item;\n    }\n    this.setState({\n      currentTool: currentTool,\n      currentItem: currentItem\n    });\n    this.clearNotBuiltItem();\n  }\n  changeItem(e) {\n    const target = e.target.closest('button');\n    const currentItem = target.getAttribute('id');\n    this.setState({\n      currentItem: currentItem\n    });\n    this.clearNotBuiltItem();\n  }\n  changeColor(e) {\n    this.setState({\n      customColor: e.target.value\n    });\n  }\n  isEditableArea(point) {\n    if (point.x > setting.mapPadding && point.x < this.state.squareSize * setting.squarePerBlock * setting.mapXBlock + setting.mapPadding && point.y > setting.mapPadding && point.y < this.state.squareSize * setting.squarePerBlock * setting.mapYBlock + setting.mapPadding) {\n      return true;\n    }\n    else {\n      return false;\n    }\n  }\n  handleDraw() {\n    paper.project.layers.buildLayer.children.forEach((itemSet)=>{\n      itemSet.children.deletBtn.opacity = 0;\n    });\n    paper.project.layers.drawLayer.activate();\n    const drawTool = new paper.Tool();\n    drawTool.activate();\n    let size, colors;\n    const thisTool = this.state.currentModeData.tools.find((tool) => {\n      if (tool.tool === this.state.currentTool) {\n        return tool;\n      }\n    });\n    size = thisTool.size ? thisTool.size : 0;\n    if (this.state.currentItem === 'colorCustom') {\n      colors = [this.state.customColor];\n    }\n    else {\n      const thisColors = this.state.currentModeData.colors.find((color) => {\n        if (color.colorName === this.state.currentItem) {\n          return color;\n        }\n      });\n      colors = thisColors.color;\n    }\n    const refPointDist = (size - 1) * setting.squareSize;\n\n    if (!paper.project.activeLayer.children.brush) {\n      let brush = new paper.Shape.Rectangle({\n        x: setting.hideDist * -1, \n        y: setting.hideDist * -1,\n        width: size * this.state.squareSize,\n        height: size * this.state.squareSize\n      });\n      brush.fillColor = 'rgba(255,255,255,0.1)';\n      brush.strokeColor = 'rgba(255,255,255,0.8)';\n      brush.name = 'brush';\n    }\n    else {\n      if (paper.project.activeLayer.children.brush.width / this.state.squareSize !== size) {\n        paper.project.activeLayer.children.brush.remove();\n        let brush = new paper.Shape.Rectangle({\n          x: setting.hideDist * -1, \n          y: setting.hideDist * -1,\n          width: size * this.state.squareSize,\n          height: size * this.state.squareSize\n        });\n        brush.fillColor = 'rgba(255,255,255,0.1)';\n        brush.strokeColor = 'rgba(255,255,255,0.8)';\n        brush.name = 'brush';\n      }\n    }\n    const brushSquare = paper.project.activeLayer.children.brush;\n    drawTool.onMouseMove = (e) => {\n      let point = new paper.Point();\n      point.x = e.point.x - (e.point.x - setting.mapPadding) % this.state.squareSize - refPointDist + this.state.squareSize * size / 2;\n      point.y = e.point.y - (e.point.y - setting.mapPadding) % this.state.squareSize - refPointDist + this.state.squareSize * size / 2;\n      brushSquare.position = point;\n    }\n    drawTool.onMouseDown = (e) => {\n      if (this.isEditableArea(e.point)) {\n        this.draw(e, size, refPointDist, colors);\n      }\n    }\n    drawTool.onMouseDrag = (e) => {\n      if (this.isEditableArea(e.point)) {\n        this.draw(e, size, refPointDist, colors);\n      }\n    }\n  }\n  draw(e, size, refPointDist, colors) {\n    paper.project.layers.drawLayer.activate();\n    let point = new paper.Point(0, 0);\n    let testPoint = new paper.Point(0, 0);\n    const brushSquare = paper.project.activeLayer.children.brush;\n    point.x = e.point.x - (e.point.x - setting.mapPadding) % this.state.squareSize - refPointDist;\n    point.y = e.point.y - (e.point.y - setting.mapPadding) % this.state.squareSize - refPointDist;\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        const drawRect = new paper.Shape.Rectangle({\n          x: point.x + i * this.state.squareSize, \n          y: point.y + j * this.state.squareSize,\n          width: this.state.squareSize,\n          height: this.state.squareSize\n        });\n        brushSquare.position = [point.x + size * this.state.squareSize / 2, point.y + size * this.state.squareSize / 2];\n        testPoint.x = point.x + i * this.state.squareSize + this.state.squareSize / 2;\n        testPoint.y = point.y + j * this.state.squareSize + this.state.squareSize / 2;\n        let hitResult = paper.project.layers[2].hitTest(testPoint, {            \n          fill: true\n        });\n        if (hitResult && hitResult.item.name !== 'brush') {\n          hitResult.item.remove();\n        }\n        drawRect.fillColor = colors[Math.floor(Math.random() * colors.length)];\n      }\n    }\n  }\n  handleBuildAndPlant() {\n    paper.project.layers.buildLayer.activate();\n    const buildTool = new paper.Tool();\n    buildTool.activate();\n    let size;\n    let isBuild = true;\n    let isEdit = false;\n    let buildPath;\n    let baseBlock;\n    let buildItem;\n    const currentTool = this.state.currentTool;\n    const thisTool = this.state.currentModeData.tools.find((tool) => {\n      if (tool.tool === currentTool) {\n        return tool;\n      }\n    });\n    const thisItem = thisTool.items.find((item) => {\n      if (item.item === this.state.currentItem) {\n        return item;\n      }\n    });\n    if (this.state.currentMode === 'build') {\n      size = thisItem.size;\n\n      buildPath = new paper.Shape.Rectangle({\n        x: 0, \n        y: 0,\n        width: size[0] * this.state.squareSize,\n        height: size[1] * this.state.squareSize\n      });\n\n      // oblique bridge\n      if (this.state.currentItem === 'b45' || this.state.currentItem === 'b135') {\n        buildPath.size = [2 * this.state.squareSize, 4 * this.state.squareSize];\n        buildPath.rotate(parseInt(this.state.currentItem.replace('b', '')));\n      }\n      buildPath.fillColor = thisItem.color ? thisItem.color : thisTool.color;\n      buildPath.strokeColor = setting.strokeColorBilding;\n      buildItem = new paper.Group([buildPath]);\n    }\n    else if (this.state.currentMode === 'plant') {\n      size = thisTool.size;\n      baseBlock = new paper.Shape.Rectangle({\n        x: 0, \n        y: 0,\n        width: size[0] * this.state.squareSize,\n        height: size[1] * this.state.squareSize\n      });\n      buildItem = new paper.Group([baseBlock]);\n\n      if (this.state.currentTool === 'tree') {\n        buildPath = new paper.Shape.Circle(new paper.Point(size[0] * this.state.squareSize / 2, size[1] * this.state.squareSize / 2), size[0] * this.state.squareSize * 0.7 / 2);\n        buildPath.fillColor = thisItem.color ? thisItem.color : thisTool.color;\n        buildPath.strokeColor = setting.strokeColorPlant;\n        buildPath.opacity = 0.5;\n      }\n      else if (this.state.currentTool === 'flower') {\n        buildPath = new paper.Shape.Circle(new paper.Point(size[0] * this.state.squareSize / 2, size[1] * this.state.squareSize / 2), size[0] * this.state.squareSize / 2);\n        buildPath.fillColor = thisItem.item;\n        buildPath.strokeColor = setting.strokeColorPlant;\n      }\n      buildItem.addChild(buildPath);\n    }\n    \n    // add img\n    if (thisItem.image && (thisTool.tool !== 'bridge' && thisTool.tool !== 'slope')) {\n      const buildImage = new paper.Raster(thisItem.image);\n      const squareSize = this.state.squareSize;\n      \n      const imageSizeSquare = currentTool === 'tree' ? 1 : 2.8;\n      buildImage.onLoad = function() {\n        buildImage.size = new paper.Size(buildImage.width * squareSize * imageSizeSquare / buildImage.height, squareSize * imageSizeSquare);\n        buildImage.position = buildItem.position;\n        buildImage.locked = true;\n        buildItem.addChild(buildImage);\n      };\n    }\n    let deletBtnBg = new paper.Shape.Circle({\n      center: [buildItem.bounds.size._width, 0], \n      radius: this.state.squareSize * 0.8\n    });\n    deletBtnBg.fillColor = '#555';\n    let deletBtnIcon = new paper.PointText(new paper.Point(buildItem.bounds.size._width - (this.state.squareSize * 1.6 - 6) / 2, (this.state.squareSize * 1.6 - 6) / 2));\n    deletBtnIcon.fillColor = '#eee';\n    deletBtnIcon.content = '×';\n    deletBtnIcon.locked = true;\n    let deletBtn = new paper.Group([deletBtnBg, deletBtnIcon]);\n    deletBtn.name = 'deletBtn';\n    deletBtn.opacity = 0;\n    deletBtn.locked = true;\n    let itemSet = new paper.Group([buildItem, deletBtn]);\n    itemSet.position = [setting.hideDist * -1, setting.hideDist * -1];\n    buildTool.onMouseMove = (e) => {\n      if (isBuild) {\n        itemSet.position.x = this.getSnapPoint(e.point.x, true, itemSet);\n        itemSet.position.y = this.getSnapPoint(e.point.y, false, itemSet);\n      }\n    }\n    buildTool.onMouseDown = (e) => {\n      if (isBuild) {\n        itemSet.position.x = this.getSnapPoint(e.point.x, true, itemSet);\n        itemSet.position.y = this.getSnapPoint(e.point.y, false, itemSet);\n        isBuild = false;\n        itemSet.data.built = true;\n      }\n      else {\n        paper.project.activeLayer.children.forEach((itemSet)=>{\n          itemSet.children.deletBtn.opacity = 0;\n        });\n        const hitResult = paper.project.layers.buildLayer.hitTest(e.point, {\n          fill: true,\n          tolerance: 1\n        });\n        if (!hitResult) {\n          isEdit = false;\n          return;\n        }\n        else {\n          if (!(hitResult.item.parent.name === 'deletBtn')) {\n            itemSet = hitResult.item.parent.parent;\n            isEdit = true;\n            itemSet.children.deletBtn.opacity = 1;\n            itemSet.children.deletBtn.locked = false;\n          }\n          else {\n            hitResult.item.parent.parent.remove();\n          }\n        }\n      }\n    }\n    buildTool.onMouseDrag = (e) => {\n      if (isEdit) {\n        itemSet.position.x = this.getSnapPoint(e.point.x, true, itemSet);\n        itemSet.position.y = this.getSnapPoint(e.point.y, false, itemSet);\n      }\n    }\n    buildTool.onMouseUp = (e) => {\n      this.setState({\n        currentItem: null\n      });\n      document.querySelectorAll('button.item').forEach(function(btn){\n        btn.blur();\n      });\n    }\n  }\n  getSnapPoint(point, isX, itemSet) {\n    let snapPoint;\n    if (isX) {\n      snapPoint = point - (point - itemSet.bounds._width / 2 - setting.mapPadding) % this.state.squareSize;\n    }\n    else {\n      snapPoint = point - (point - itemSet.bounds._height / 2 - setting.mapPadding) % this.state.squareSize;\n    }\n    return snapPoint;\n  }\n  clearBrushHover() {\n    if (paper.project.layers.drawLayer.children.brush) {\n      paper.project.layers.drawLayer.children.brush.remove();\n    }\n  }\n  clearNotBuiltItem() {\n    const lastBuild = paper.project.layers.buildLayer.children[paper.project.layers.buildLayer.children.length - 1];\n    if (lastBuild && !lastBuild.data.built) {\n      lastBuild.remove();\n    }\n  }\n  render() {\n    if (!this.state.isImgUploaded) {\n      return (\n        <div className='intro'>\n          <h1><div>Lazy Island Planner</div></h1>\n          <p>這是一個給懶人用的《集合啦！動物森友會》島嶼規劃工具。</p>\n          <p>上傳你擷取的島嶼地圖畫面（如下圖）即可開始，或<button className='link' onClick={this.useDefaultMap}>先用我的地圖試試看</button>。</p>\n          <img src='test.jpg' alt='上傳圖示意圖' className='island-map' />\n          <form>\n            <input type='file' ref={this.fileInput} accept='image/*' id='img-input' onChange={this.selectImg} />\n            <label for='img-input' className='fake-input'>選擇檔案</label>\n            <div id='error-message'></div>\n            <button type='button' className='btn-upload' onClick={this.upLoadImg}>上傳</button>\n          </form>\n        </div>\n      )\n    }\n    else {\n      return (\n        <div className='editor'>\n          <aside>\n            <div className='modes'>\n              <MenuModes toolData={toolData.toolData} currentMode = {this.state.currentMode} onClick={this.changeMode} />\n            </div>\n            \n            <div className='tools'>\n              <MenuTools currentTool={this.state.currentTool} currentModeData={this.state.currentModeData} onClick={this.changeTool} />\n              <MenuItems currentMode={this.state.currentMode} currentModeData={this.state.currentModeData} currentTool={this.state.currentTool} currentItem={this.state.currentItem} onClick={this.changeItem} customColor={this.state.customColor} changeColor={this.changeColor} /> \n            </div>\n          </aside>\n          <canvas id='canvas' ref={this.canvas}>\n          </canvas>\n        </div>\n      );\n    }\n  }\n}\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}